{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","notes","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","Footer","style","color","fontStyle","fontSize","App","useState","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","find","changedNote","noteService","returnedNotes","map","catch","error","setTimeout","filter","useEffect","initialNotes","console","log","length","notesToShow","bind","onSubmit","event","preventDefault","newNoteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAeeA,MAbf,YAAyC,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,iBACbC,EAAQF,EAAKG,UACf,qBACA,iBAEJ,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCI3BK,MAZf,YAAkC,IAAXC,EAAU,EAAVA,QACrB,OAAe,OAAZA,EACM,KAIP,qBAAKJ,UAAU,QAAf,SACGI,K,gBCPDC,EAAU,aAiBhB,IAMeC,EAND,CACZC,OAhBF,WAEE,OADgBC,IAAMC,IAAIJ,GACXK,MAAK,SAACC,GAAc,OAAOA,EAASC,SAenDC,OAZF,SAAgBC,GAEd,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAACC,GAAc,OAAOA,EAASC,SAWnDI,OARF,SAAgBC,EAAIH,GAElB,OADgBN,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAMH,GAC/BJ,MAAK,SAACC,GAAc,OAAOA,EAASC,UC0FrD,SAASO,IAMP,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,mEAKSC,MAnHf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOnB,EAAP,KAAcoB,EAAd,KACA,EAA8BD,mBAAS,iBAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAAwCL,mBAAS,MAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KAoCA,SAASnC,EAAiBoB,GAExB,IAAMrB,EAAOU,EAAM2B,MAAK,SAACrC,GAAU,OAAOA,EAAKqB,KAAOA,KAEhDiB,EAAW,2BAAOtC,GAAP,IAAaG,WAAYH,EAAKG,YAE/CoC,EACGnB,OAAOC,EAAIiB,GACXxB,MAAK,SAAC0B,GACLV,EACEpB,EAAM+B,KAAI,SAACzC,GACT,OAAOA,EAAKqB,KAAOA,EACfmB,EACAxC,SAIT0C,OAAM,SAACC,GACNP,EAAgB,4CAChBQ,YAAW,WACTR,EAAgB,QACf,KACHN,EAASpB,EAAMmC,QAAO,SAAC7C,GAAU,OAAOA,EAAKqB,KAAOA,SAxD1DyB,qBAAU,WACRP,EACG5B,SACAG,MAAM,SAACiC,GACNjB,EAASiB,QAEZ,IAEHC,QAAQC,IAAI,SAAUvC,EAAMwC,OAAQ,SAoDpC,IAAMC,EAAclB,EAChBvB,EACAA,EAAMmC,QAAQ,SAAC7C,GAAU,OAAOA,EAAKG,aAGzC,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAAS2B,IACvB,8BACE,yBAAQ7B,QAxCd,WACE4B,GAAYD,IAuCR,kBACQA,EAAU,YAAc,WAGlC,6BACGkB,EAAYV,KAAK,SAACzC,GAAD,OAClB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkBA,EAAiBmD,KAAK,KAAMpD,EAAKqB,KAF9CrB,EAAKqB,SAMd,uBAAMgC,SAzEV,SAAiBC,GACfA,EAAMC,iBACN,IAAMC,EAAgB,CACpBnD,QAAS0B,EACT0B,MAAM,IAAIC,MAAOC,cACjBxD,UAAWyD,KAAKC,SAAW,IAE7BtB,EACGtB,OAAOuC,GACP1C,MAAK,SAAC0B,GACLV,EAASpB,EAAMoD,OAAOtB,IACtBR,EAAW,QA8Db,UACE,uBACE+B,MAAOhC,EACPiC,SA7DR,SAA6BV,GAC3BN,QAAQC,IAAIK,EAAMW,OAAOF,OACzB/B,EAAWsB,EAAMW,OAAOF,UA6DpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC3C,EAAD,Q,MCjGN4C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f239518e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Note({note, toggleImportance}) {\r\n  const label = note.important\r\n    ? 'make not important'\r\n    : 'make important';\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li> \r\n  );\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nfunction Notification({message}) {\r\n  if(message === null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/notes';\r\n\r\nfunction getAll() {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => {return response.data;});\r\n}\r\n\r\nfunction create(newObject) {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => {return response.data;});\r\n}\r\n\r\nfunction update(id, newObject) {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => {return response.data;});\r\n}\r\n\r\nconst notes = {\r\n  getAll,\r\n  create,\r\n  update\r\n};\r\n\r\nexport default notes;","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('A new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then( (initialNotes) => {\n        setNotes(initialNotes);\n      });\n  }, []);\n\n  console.log('render', notes.length, 'notes')\n\n  function addNote(event) {\n    event.preventDefault();\n    const newNoteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n    noteService\n      .create(newNoteObject)\n      .then((returnedNotes) => {\n        setNotes(notes.concat(returnedNotes));\n        setNewNote('');\n      });\n  }\n\n  function handleNewNoteChange(event) {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  }\n\n  function handleShowAllButton() {\n    setShowAll(!showAll);\n  }\n\n  function toggleImportance(id) {\n    //  Reference to note in array\n    const note = notes.find((note) => {return note.id === id});\n    //  Create new note to avoid mutating note in array\n    const changedNote = {...note, important: !note.important};\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNotes) => {\n        setNotes(\n          notes.map((note) => {\n            return note.id === id \n              ? returnedNotes\n              : note;\n          })\n        )\n      })\n      .catch((error) => {\n        setErrorMessage(`The note was already deleted from server`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 10000);\n        setNotes(notes.filter((note) => {return note.id !== id}));\n      });\n  }\n  \n  const notesToShow = showAll\n    ? notes\n    : notes.filter( (note) => {return note.important;} );\n\n  //  Each child in a LIST (not <ul>) should have a unique \"key\" prop.\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={handleShowAllButton}>\n          Show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map( (note) => \n        <Note \n          key={note.id}\n          note={note}\n          toggleImportance={toggleImportance.bind(null, note.id)}\n        />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNewNoteChange}\n        />\n        <button type=\"submit\">Save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n}\n\nfunction Footer() {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, created by Pattamite</em>\n    </div>\n  );\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}